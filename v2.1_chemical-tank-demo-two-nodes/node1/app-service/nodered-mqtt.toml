[Writable]
LogLevel = "INFO"

  [Writable.Pipeline]
  ExecutionOrder = "FilterByDeviceName, MQTTExport"
    [Writable.Pipeline.Functions.FilterByDeviceName]
      [Writable.Pipeline.Functions.FilterByDeviceName.Parameters]
      DeviceNames = "Chemical-Tank, Outlet-Valve"

    [Writable.Pipeline.Functions.MQTTExport]
      [Writable.Pipeline.Functions.MQTTExport.Parameters]
      BrokerAddress = "tcp://172.17.0.1:1883"
      Topic = "MyTopic"
      ClientID = "noderedClient"
      Qos = "0"
      AutoReconnect = "false"
      Retain="false"
      SkipVerify = "false"
      AuthMode = "none"
      PersistOnError = "false"
      SecretPath = "nodered"

# InsecureSecrets are required for Store and Forward DB access and for authenticated MQTT exports with
# new MQTTSecretSend function when not using security services, i.e. Vault
  [Writable.InsecureSecrets]
    [Writable.InsecureSecrets.DB]
    path = "redisdb"
      [Writable.InsecureSecrets.DB.Secrets]
      username = ""
      password = ""

[Service]
HealthCheckInterval = "10s"
Host = "localhost"
Port = 59700
ServerBindAddr = "" # if blank, uses default Go behavior https://golang.org/pkg/net/#Listen
StartupMsg = "app-mqtt-export has Started"
MaxResultCount = 0 # Not curently used by App Services.
MaxRequestSize = 0 # Not curently used by App Services.
RequestTimeout = "5s"

[Registry]
Host = "localhost"
Port = 8500
Type = "consul"

# Database is require when Store and Forward is enabled or when using Redis for the Messagebus
# Note when running in docker from compose file set the following environment variables:
# - Database_Host: edgex-redis
[Database]
Type = "redisdb"
Host = "localhost"
Port = 6379
Timeout = "30s"

# SecretStore is required when Store and Forward is enabled and running with security
# so Database credentials can be pulled from Vault. Also now require when running with secure Consul
# Note when running in docker from compose file set the following environment variables:
#   - SecretStore_Host: edgex-vault
[SecretStore]
Type = 'vault'
Host = 'localhost'
Port = 8200
Path = 'app-mqtt-export/'
Protocol = 'http'
RootCaCertPath = ''
ServerName = ''
TokenFile = '/tmp/edgex/secrets/app-mqtt-export/secrets-token.json'
  [SecretStore.Authentication]
  AuthType = 'X-Vault-Token'

[Clients]
  # Used for version check on start-up
  [Clients.core-metadata]
  Protocol = 'http'
  Host = 'localhost'
  Port = 59881

[Trigger]
Type="edgex-messagebus"
  [Trigger.EdgexMessageBus]
  Type = "mqtt"
  [Trigger.EdgexMessageBus.SubscribeHost]
  Host = "localhost"
  Port = 1883
  Protocol = "mqtt"
  SubscribeTopics="edgex/events/#"
  [Trigger.EdgexMessageBus.PublishHost]
  Host = "localhost"
  Port = 1883
  Protocol = "mqtt"
  PublishTopic="example"
  [Trigger.EdgexMessageBus.Optional]
  Qos            = "0" # Quality of Sevice values are 0 (At most once), 1 (At least once) or 2 (Exactly once)
  KeepAlive      = "10" # Seconds (must be 2 or greater)
  Retained       = "false"
  AutoReconnect  = "true"
  ConnectTimeout = "30" # Seconds
  SkipCertVerify = "false"
  authmode = "none"  # change to "usernamepassword", "clientcert", or "cacert" for secure MQTT messagebus.
  secretname = "mqtt-bus"